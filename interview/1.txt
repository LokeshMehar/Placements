This diagram shows how WebExpress transparently inserts itself between your browser and the web server to optimize communication.

```
+----------------+       +-------------------+       +-------------------+       +----------------+
|                |       | WebExpress Client |       | WebExpress Server |       |                |
|  Web Browser   | <---> |   (CSI / Local    | <---> |   (SSI / Remote   | <---> |   Web Server   |
| (on Mobile Host)|       |      Proxy)       |       |       Proxy)      |       | (on Fixed Net) |
|                |       | (on Mobile Host)  |       | (on Fixed Net)    |       |                |
+----------------+       +-------------------+       +-------------------+       +----------------+
      ^                          ^                           ^                           ^
      |                          |                           |                           |
      |   1. Local HTTP Call     |   2. Multiplexed,         |   3. Standard HTTP        |
      | (Looks like direct to    |      Optimized Link       | (Looks like direct from   |
      |     Web Server)          |  (Single virtual socket)  |     Web Browser)          |
      |                          |                           |                           |
      +------------------------->+--------------------------->+--------------------------->
          (via TCP/IP Stack)      (Wireless or WAN Link)       (Wired Network)

Key:
- **CSI (Client Side Intercept):** A local proxy on the mobile device that intercepts browser requests.
- **SSI (Server Side Intercept):** A remote proxy on the fixed network that communicates with actual web servers.
- **Multiplexing:** Combining multiple HTTP requests into a single, efficient connection between CSI and SSI to reduce protocol overhead and latency.
- **Protocol Reduction:** The overall goal of using a single optimized connection instead of many individual HTTP/TCP connections.
```









1. ABS Architecture: Client, Server, and Blob Store
This diagram shows the overall flow, from where video content is stored to how it reaches the client.

+------------------+                   +--------------------+                   +------------------+
|   Blob Store     |                   |       Server       |                   |      Client      |
| (Video Content   |                   |  (Chunk Retriever) |                   |  (Video Player)  |
|   Repository)    |                   |                    |                   |                  |
+------------------+                   +--------------------+                   +------------------+
        ^                                        ^                                        ^
        | 1. Video assets are                    |                                        |
        |    pre-transcoded into                 |                                        |
        |    multiple quality versions,          |                                        |
        |    then segmented into time-           |                                        |
        |    aligned "chunks". All chunks        |                                        |
        |    are stored here.                    |                                        |
        |                                        |                                        |
        +----------------------------------------+----------------------------------------+
                                                 |                                        |
                                                 | 2. Client requests a "Manifest File"   |
                                                 |    (or HLS/DASH playlist) from Server. |
                                                 |    Manifest lists all available chunks |
                                                 |    and their quality levels in Blob Store. |
                                                 |                                        |
                                                 +<----------------------------------------
                                                 |                                        |
                                                 | 3. Client's Player (the "brain" of ABS) |
                                                 |    monitors network speed and buffer status. |
                                                 |                                        |
                                                 | 4. Client requests NEXT video chunk from Server, |
                                                 |    specifying desired quality (e.g., 720p, Chunk #X). |
                                                 |                                        |
                                                 +<----------------------------------------
                                                 |                                        |
                                                 | 5. Server retrieves requested chunk    |
                                                 |    from Blob Store and sends to Client. |
                                                 |                                        |
                                                 +--------------------------------------->+
Description:

Blob Store: This is where all the actual video data resides. It's not a single file, but many small video "chunks" organized by quality level. Think of it as a huge warehouse.

Server: A lightweight component that acts as an intermediary. It responds to client requests for specific chunks and pulls them from the Blob Store. It doesn't do real-time transcoding.

Client (Video Player): The intelligent part. It manages the buffer, monitors network conditions, requests chunks, and plays them back.

2. Fixed Bitrate Streaming (Illustrating the Problem)
This diagram shows why traditional streaming often leads to buffering. It includes t1, t2, playback starts, file seek.

        Client                             Server                          Blob Store
          |                                 |                                 |
          | --- Client requests video --->  |                                 |
          |                                 |--- Server fetches FULL video -->|
          |                                 |                                 |
          |                                 |<-- FULL video stream begins ----|
          |                                 |                                 |
          |<---- Video stream starts ------>|                                 |
          |       (at time t1)              |                                 |
          |                                 |                                 |
      t1 -+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
          |          (Buffering)            |                                 |
          |                                 |                                 |
          |                                 |                                 |
      t2 -+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
          |      Playback Starts            |                                 |
          |        (t2 >> t1)               |                                 |
          |                                 |                                 |
          |  (If network < video bitrate,   |                                 |
          |   buffer constantly empties,    |                                 |
          |   leading to freezes and more   |                                 |
          |   "Buffering" time)             |                                 |
          |                                 |                                 |
          | <-------- File Seek ----------- |                                 |
          | (Problematic, needs server to    |                                 |
          |  re-start stream from new point)|                                 |
          |                                 |                                 |
Description:

t1: The time the client sends the initial request.

t2: The time when enough data is in the buffer for playback to begin. In fixed bitrate streaming over a slow network, t2 can be much larger than t1 (meaning a long wait).

playback starts: The point where the video actually begins playing.

buffering: The initial period (or interruptions during playback) where the client is filling its buffer with incoming video data.

file seek: Trying to jump to a specific point in the video is difficult because the server is sending a continuous stream from a single starting point.

3. Adaptive Bitrate Streaming: Chunked Transfer & Buffering
This diagram focuses on how chunks are transferred and buffered to enable smooth playback with less initial delay (t2 < t1).

        Client                             Server                          Blob Store
          |                                 |                                 |
          | --- Client requests Manifest -> |                                 |
          |                                 | --- Server fetches Manifest --> |
          |                                 |                                 |
          |<---- Manifest returned -------- |                                 |
          |                                 |                                 |
      t1 -+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
          | --- Client requests CHUNK 1 --> |                                 |
          |       (e.g., Low Quality)       | --- Server fetches CHUNK 1 --> |
          |                                 |                                 |
          |<--- CHUNK 1 returned (fast) --- |                                 |
          |                                 |                                 |
      t2 -+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
          |      Playback Starts            |                                 |
          |        (t2 < t1)                |                                 |
          |                                 |                                 |
          |       (Buffering only           |                                 |
          |        a few chunks)            |                                 |
          |                                 |                                 |
Description:

t1: Time when the client requests the first actual video chunk.

t2: Time when playback starts. Because chunks are small and the initial quality might be low, t2 is typically much closer to t1, resulting in a faster startup.

1 min. chunk: Your notes mention this. While individual chunks are usually 2-10 seconds, this highlights the challenge: if a "1-minute chunk" (meaning 1 minute of video content) takes 2 minutes to send, it's not feasible for continuous playback. ABS solves this by dynamically choosing a quality level that can be sent in real-time.

buffering: The client aims to maintain a small buffer of upcoming chunks, ensuring continuous playback.

4. Adaptive Bitrate Streaming: Dynamic Quality Switching (HQ/LQ, High BR/Low BR)
This diagram illustrates how the client switches between different quality versions based on network conditions.

                                              Network Bandwidth
                                              -----------------
        Client                             Server                          Blob Store
          |                                 |                                 |
          |                                 |                                 | (Pre-transcoded content)
          |                                 |                                 |
          |                                 |                                 |   [Chunk 1 HQ] [Chunk 2 HQ]
          |                                 |                                 |   [Chunk 1 MQ] [Chunk 2 MQ]
          |                                 |                                 |   [Chunk 1 LQ] [Chunk 2 LQ]
          |                                 |                                 |
          |   (Client detects HIGH Network Bandwidth)                       |
          |                                 |                                 |
          |---- Request CHUNK #1 (High BR / HQ) ----> |                       |
          |                                 | ---- Fetch CHUNK #1 HQ ---->  |
          |<---- Receive CHUNK #1 (High BR / HQ) -----|                       |
          |                                 |                                 |
          |   (Client detects LOW Network Bandwidth)                        |
          |                                 |                                 |
          |---- Request CHUNK #2 (Low BR / LQ) ---->  |                       |
          |                                 | ---- Fetch CHUNK #2 LQ ---->  |
          |<---- Receive CHUNK #2 (Low BR / LQ) ----- |                       |
          |                                 |                                 |
          | (Quality degrades gracefully)   |                                 |
          |                                 |                                 |
Description:

High BR (Bitrate) / HQ (High Quality): When the client's network connection is good, it requests chunks that require a high data rate, resulting in high-quality video.

Low BR (Bitrate) / LQ (Low Quality): When the client's network connection degrades, it requests chunks that require a low data rate, resulting in lower-quality video.

Quality degrades: This refers to the visual degradation experienced by the user when the player switches to a lower bitrate stream to maintain continuous playback. This is an intentional and necessary trade-off in ABS.

These diagrams should provide a clear visual understanding of how ABS works and how it addresses the challenges of mobile video streaming.






1. QoS Application Matrix
This diagram classifies applications based on their tolerance for data loss and latency, as discussed in your first set of notes.

                      <------------------- LATENCY ------------------->
                      |     Insensitive (Delay is OK)     |   Sensitive (Real-time)   |
----------------------|-----------------------------------|---------------------------|
L   | Tolerant        |   Video Streaming (Buffering)     |   VoIP (e.g., Skype call) |
O   | (Some data loss |   Standard Web Browsing           |                           |
S   |  is acceptable) |                                   |                           |
S   ------------------|-----------------------------------|---------------------------|
    | Intolerant      |   File Download (FTP)             |   Video Conferencing      |
    | (Data must be   |   Email, Text Messaging           |   Online Gaming           |
    |   perfect)      |                                   |   Financial Transactions  |
----------------------|-----------------------------------|---------------------------|
2. Mobile Client-Server Architecture
This shows the fundamental structure of a mobile application, connecting a wireless client to a wired server.

+---------------------+                          +--------------------+
|   Mobile Host       |                          |   Fixed Host       |
|   (Client Device)   |                          |     (Server)       |
|                     |                          |                    |
| [ Application ]<----|---- Request/Response ----|-->[ Application ]  |
+---------------------+                          +--------------------+
         ^                                                 ^
         |                                                 |
         |~~~~~~~~~ Wireless Link ~~~~~~~~~~~~             |------ Wired Network ---
         |          (e.g., 4G/5G, Wi-Fi)                   |      (Internet)
         V                                                 V
  (Unreliable, Variable)                           (Reliable, Fast)
3. HLR/VLR Call Routing Flowchart
This flowchart illustrates how the network finds your phone when someone calls you, using the HLR and VLR databases.

[ Caller ]
    |
    | 1. Dials your number
    V
[ Gateway MSC (Network Entry) ]
    |
    | 2. "I have a call for this number. Where is it?"
    |    (Sends query to the user's home network)
    V
[ Home Location Register (HLR) ]
    |
    | 3. Looks up subscriber. "The user is currently
    |    in the area covered by VLR-B. Here is the
    |    routing number."
    V
[ Visitor Location Register (VLR-B) & associated MSC ]
    |
    | 4. Receives the routed call.
    |    "I need to find the specific cell for this user."
    |
    V
[ Mobile Phone ]
    |
    | 5. Receives page from the local cell tower.
    |    Rings.
    V
[ Call Connected ]
4. Normal vs. Orphan Call Sequence Diagram
This diagram contrasts a successful request-response cycle with an "orphan call" caused by a sudden disconnection. Time flows from top to bottom.

A) Normal, Successful Connection

   Client                             Server
      |                                 |
      |---------- Request -----------> |
      |                                 | (Executes task...)
      | <--------- Response -----------|
      |                                 |
      V                                 V
 (Task Complete)
B) Orphan Call due to Disconnection

   Client                             Server
      |                                 |
      |---------- Request -----------> |
      |                                 | (Executes task...)
      |                                 |
  <---|---!!! CLIENT DISCONNECTS !!!----|--->
      |                                 |
(Offline)                             | <--- Response (Fails: No one to send it to)
      |                                 |
      V                                 V
                               (Server resources wasted)